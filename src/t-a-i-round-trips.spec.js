'use strict'

/* eslint-env jasmine */
const tai = require('../src/t-a-i.js')

describe('TAI round trips', () => {
  describe('unixToAtomic and back', () => {
    const numbers = [
      -126230395686.829986572265625,
      -136771195844.941986083984375,
      -136771199900,
      -136771200000,
      -142127996025.293975830078125,
      -142127999900,
      -152668796283.405975341796875,
      -152668799900,
      -157766396459.8699951171875,
      -157766399900,
      -157766400000,
      -168307196717.98199462890625,
      -168307199900,
      -168307200000,
      -181526397016.269989013671875,
      -181526399900,
      -181526400000,
      -189388797234.20599365234375,
      -189388800000,
      -194659197302.72119140625,
      -194659199900,
      -252460798154.141998291015625,
      -252460800000,
      -265679998352.42999267578125,
      -283996798577.18194580078125,
      -60479993814.3179931640625,
      1136073633000,
      1230768034000,
      126230413000,
      1341100835000,
      1435708836000,
      1483228837000,
      157766414000,
      189302415000,
      220924816000,
      252460817000,
      283996818000,
      315532819000,
      362793620000,
      394329621000,
      425865622000,
      489024023000,
      567993624000,
      63072000107.75800323486328125,
      63072010000,
      631152025000,
      662688026000,
      709948827000,
      741484828000,
      773020829000,
      78796811000,
      820454430000,
      867715231000,
      915148832000,
      94694412000
    ]
    numbers.forEach(number => {
      it(String(number), () => {
        expect(tai.convert.oneToOne.atomicToUnix(tai.convert.oneToOne.unixToAtomic(number))).toBe(number)
      })
    })
  })

  describe('atomicToUnix and back', () => {
    const numbers = [
      -126230395686.829986572265625,
      -126230400000,
      -136771195844.941986083984375,
      -136771199900,
      -136771200000,
      -142127996025.293975830078125,
      -142127999900,
      -142128000000,
      -152668796283.405975341796875,
      -152668799900,
      -152668800000,
      -157766396459.8699951171875,
      -157766399900,
      -157766400000,
      -168307196717.98199462890625,
      -168307199900,
      -168307200000,
      -181526397016.269989013671875,
      -181526399900,
      -181526400000,
      -189388797234.20599365234375,
      -189388800000,
      -194659197302.72119140625,
      -194659199900,
      -194659200000,
      -252460798154.141998291015625,
      -252460800000,
      -265679998352.42999267578125,
      -265680000000,
      -265680000049.999969482421875,
      -283996798577.18194580078125,
      -60479993814.3179931640625,
      -60480000000,
      -60480000099.99999237060546875,
      1136073633000,
      1230768034000,
      126230413000,
      1341100835000,
      1435708836000,
      1483228837000,
      157766414000,
      189302415000,
      220924816000,
      252460817000,
      283996818000,
      315532819000,
      362793620000,
      394329621000,
      425865622000,
      489024023000,
      567993624000,
      63072000107.75800323486328125,
      63072010000,
      631152025000,
      662688026000,
      709948827000,
      741484828000,
      773020829000,
      78796811000,
      820454430000,
      867715231000,
      915148832000,
      94694412000
    ]
    numbers.forEach(number => {
      it(String(number), () => {
        expect(tai.convert.oneToOne.unixToAtomic(tai.convert.oneToOne.atomicToUnix(number))).toBe(number)
      })
    })
  })
})
